<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ens on Learn Pingo Console</title>
    <link>http://ghstahl.github.io/LearnPingoConsole/en/</link>
    <description>Recent content in Ens on Learn Pingo Console</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 May 2015 11:09:35 +0000</lastBuildDate>
    <atom:link href="http://ghstahl.github.io/LearnPingoConsole/en/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Create Command Plugin</title>
      <link>http://ghstahl.github.io/LearnPingoConsole/en/docs/tutorial/create-command-plugin/</link>
      <pubDate>Thu, 07 May 2015 11:09:35 +0000</pubDate>
      
      <guid>http://ghstahl.github.io/LearnPingoConsole/en/docs/tutorial/create-command-plugin/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Install the &lt;em&gt;&lt;strong&gt;Pingo.Commandline.PluginTemplate&lt;/strong&gt;&lt;/em&gt; Extension&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;direct: &lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/7b579419-fdbd-4b47-880c-261409120bb9&#34;&gt;Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual Studio 2013: Tools -&amp;gt; Extensions and Updates&amp;hellip; -&amp;gt; Online&lt;/li&gt;
&lt;li&gt;restart visual studio 2013&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create a new Project&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;Use the newly installed &lt;em&gt;&lt;strong&gt;Pingo.Commandline.PluginTemplate&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Name it &lt;em&gt;&lt;strong&gt;&amp;ldquo;My.Sweet.Command&amp;rdquo;&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A wizard prompt asks for what your command name should be.

&lt;ul&gt;
&lt;li&gt;Enter &lt;em&gt;&lt;strong&gt;&amp;ldquo;Sweet&amp;rdquo;&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Press &amp;ldquo;Done&amp;rdquo;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Build &lt;em&gt;&lt;strong&gt;&amp;ldquo;My.Sweet.Command&amp;rdquo;&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Add the &lt;em&gt;&lt;strong&gt;&amp;ldquo;My.Sweet.Command&amp;rdquo;&lt;/strong&gt;&lt;/em&gt; project as a reference to &lt;em&gt;&lt;strong&gt;&amp;ldquo;ConsoleMe&amp;rdquo;&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Build &lt;strong&gt;&lt;em&gt;&amp;ldquo;ConsoleMe&amp;rdquo;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Done and Run!&lt;br /&gt;
You should see your &lt;em&gt;&lt;strong&gt;&amp;ldquo;Sweet&amp;rdquo;&lt;/strong&gt;&lt;/em&gt; command in the list of now usable commands.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Modify your command project to suit.&lt;/li&gt;
&lt;li&gt;You can now uninstall the &lt;strong&gt;&lt;em&gt;Pingo.JsonConverters.Commands&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Pingo.TestCommands&lt;/em&gt;&lt;/strong&gt; nugets from &lt;em&gt;&lt;strong&gt;&amp;ldquo;ConsoleMe&amp;rdquo;&lt;/strong&gt;&lt;/em&gt;, Unless you really want to keep them in there for their profound &lt;strong&gt;&lt;em&gt;awesomeness&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Jump Start</title>
      <link>http://ghstahl.github.io/LearnPingoConsole/en/docs/tutorial/jump-start/</link>
      <pubDate>Thu, 07 May 2015 11:09:35 +0000</pubDate>
      
      <guid>http://ghstahl.github.io/LearnPingoConsole/en/docs/tutorial/jump-start/</guid>
      <description>

&lt;p&gt;Requirements: Visual Studio 2013&lt;/p&gt;

&lt;p&gt;The Pingo Console framework is modeled after how nuget.exe works.  It produces a standalone exe, with all its dlls embedded as resources.  No need for after the fact packing to turn a c# console app with a bunch of supporting dlls into a single standalone exe.  Most the work in the framework deals with how help is managed and how plugins are to serve help content to the display engine.  The motivation of the framework was to deal with what a console app should be before you actually bring in the code to make it do something.&lt;/p&gt;

&lt;p&gt;At the end of this tutorial we will have created a fully working console app that does some Json conversions, and we will do it without writing hardly any code.  The main thing to get out of this tutorial is to understand how the parts come together to form the app.&lt;/p&gt;

&lt;h3 id=&#34;anatomy-of-the-app:e019bc037fc8161e85277033b81c3c2b&#34;&gt;Anatomy of the App.&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Console Starter Project&lt;br /&gt;
This is the stock Microsoft C# project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Pingo.EmbeddedAssemblies&lt;/strong&gt;&lt;/em&gt; Nuget&lt;br /&gt;
This is used to create an app that has its assemblies embedded as resources.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Pingo.Console&lt;/strong&gt;&lt;/em&gt; Nuget&lt;br /&gt;
This is the core framework engine.  I really don&amp;rsquo;t want to expose too much from this project as I didn&amp;rsquo;t write these classes to be consumed externally.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Pingo.CommandLineHelp&lt;/strong&gt;&lt;/em&gt; Nuget&lt;br /&gt;
This is the Help engine that is really a display engine for help.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Plugins&lt;br /&gt;
These are written by you to provide help content and the actually command.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;step-by-step-instructions:e019bc037fc8161e85277033b81c3c2b&#34;&gt;Step by Step instructions&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;A VSIX to do all this will soon follow.  
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Create a new console project&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;Name it &lt;em&gt;&lt;strong&gt;&amp;ldquo;ConsoleMe&amp;rdquo;&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Enable Nuget Restore for your Solution&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Make your Console App a Single Exe&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;install nuget: &lt;em&gt;&lt;strong&gt;Pingo.EmbeddedAssemblies&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Agree to the file replacement prompts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bring in the Pingo Console Kit&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;install nuget: &lt;em&gt;&lt;strong&gt;Pingo.CommandLineHelp&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;install nuget: &lt;strong&gt;&lt;em&gt;Pingo.Console&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bring in a few stock commands&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;install nuget: &lt;em&gt;&lt;strong&gt;Pingo.JsonConverters.Commands&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;install nuget: &lt;em&gt;&lt;strong&gt;Pingo.TestCommands&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Edit Program.cs&lt;br /&gt;
This is the only code that should added to the hosting app.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using System;
using System.Runtime.CompilerServices;
using Pingo.CommandLine.Composite;


namespace ConsoleMe
{
    class Program
    {
        private static void Main(string[] args)
        {
            AppDomain.CurrentDomain.AssemblyResolve 
                += new ResolveEventHandler(ConsoleMe.PingoEmbeddedAssemblies.AssemblyResolver.OnResolveAssembly);
            MainCore(args);
        }


        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void MainCore(string[] args)
        {
            Pingo.CommandLine.EntryPoint.Program.MefRunnerEntryPoint(new EntryAssemblyEmbeddedMefAssemblies(), args);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build and Run&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Enhancements</title>
      <link>http://ghstahl.github.io/LearnPingoConsole/en/docs/developer/Enhancements/</link>
      <pubDate>Wed, 06 May 2015 11:09:35 +0000</pubDate>
      
      <guid>http://ghstahl.github.io/LearnPingoConsole/en/docs/developer/Enhancements/</guid>
      <description>&lt;p&gt;This is a work in progress where I am cherry picking what resources I want to let come in via a plugin.&lt;br /&gt;
At the moment I am only accounting for a header and footer string for the console output pages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ghstahl/PingoConsole/tree/master/Pingo.Theme&#34;&gt;Pingo.Theme Reference Project&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a class library project&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;Name it &lt;strong&gt;&lt;em&gt;&amp;ldquo;My.PingoConsole.Theme&amp;rdquo;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Add this project as a reference in your console app&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following code to your &lt;strong&gt;&lt;em&gt;&amp;ldquo;My.PingoConsole.Theme&amp;rdquo;&lt;/em&gt;&lt;/strong&gt; project&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;[Export(typeof(Pingo.CommandLine.Contracts.Help.IHelpResource))]
public class MakeItMineTheme : Pingo.CommandLine.Contracts.Help.IHelpResource
{
    public string Header { get { return Resources.Common.Header; } }
    public string Footer { get { return Resources.Common.Footer; } }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have my strings comming out of resources.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>http://ghstahl.github.io/LearnPingoConsole/en/</link>
      <pubDate>Wed, 06 May 2015 11:09:35 +0000</pubDate>
      
      <guid>http://ghstahl.github.io/LearnPingoConsole/en/</guid>
      <description>

&lt;h3 id=&#34;get-started:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Get Started&lt;/h3&gt;

&lt;p&gt;For the &amp;ldquo;A tutorial is all I need crowd&amp;rdquo;: &lt;a href=&#34;docs/tutorial/jump-start/&#34;&gt;Enough chit chat, Lets do this thing!&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;motivation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Motivation&lt;/h3&gt;

&lt;p&gt;I rarely need to create a console app, but it is a requirement to know how to properly create one to be consumed by clients.  In my case, these are usually Developers, Build Engineers, QA Engineers, and Operations.  After a few of these, I got tired to writing a help section, and trying to yet again pick the right open source parsers.  When finally looking at the the work that went into the app, most of it wasn&amp;rsquo;t for the reason that I needed to build the app.  A console app should be something before you actually put in your reason for wanting one, i.e. your code to transform a json file into xml is harldy anything when compared to the help section.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This is the last time I am writing a help display section for an app!&lt;/li&gt;
&lt;li&gt;This is the last time I am picking a parser!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;opinions:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Opinions&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Parsing commands line arguments has nothing to do with help.&lt;br /&gt;
Parsers should parse and not pollute themselves with adding descriptions strings to commands.  My favorite parser, &lt;a href=&#34;https://github.com/ghstahl/fluent-command-line-parser&#34;&gt;Pingo Variant of Fluent Command Line Parser!&lt;/a&gt;, is simple and even simpler when you don&amp;rsquo;t engage in its help sub system.  If I had my way, I would completely remove any notion of help from that project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Help is just another command.&lt;br /&gt;
Just like any other command, it needs its own parser.  The &lt;a href=&#34;https://github.com/ghstahl/PingoConsole/tree/master/Pingo.CommandLineHelp&#34;&gt;Pingo.CommandLineHelp Project&lt;/a&gt; implements the &lt;a href=&#34;https://github.com/ghstahl/PingoConsole/blob/master/Pingo.CommandLine/Contracts/Command/ICommand.cs&#34;&gt;ICommand interface&lt;/a&gt; and &lt;a href=&#34;https://github.com/ghstahl/PingoConsole/blob/master/Pingo.CommandLine/Contracts/Help/ICommandHelp.cs&#34;&gt;ICommandHelp interface&lt;/a&gt; just like every other command implementation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you use this, you will only be asked to write code that nobody has written before.
All you need to write is your command and provide the framework your help strings.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I should be able to make the mother of all command line apps by simply installing a bunch of nugets that implement the Pingo Console command interfaces.
&lt;a href=&#34;docs/tutorial/create-command-plugin/&#34;&gt;Create Your Own Command!&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Command-Line apps should be single stand-alone executables.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;references:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;References&lt;/h3&gt;

&lt;p&gt;The help section in Pingo Console is exactly like nuget.exe.  So much so, that if Pingo Console was around I would hope the nuget.exe folks would have used it to jump stater their project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Parser</title>
      <link>http://ghstahl.github.io/LearnPingoConsole/en/docs/developer/parser/</link>
      <pubDate>Wed, 06 May 2015 11:09:35 +0000</pubDate>
      
      <guid>http://ghstahl.github.io/LearnPingoConsole/en/docs/developer/parser/</guid>
      <description>&lt;p&gt;Firstly, Pingo Console doesn&amp;rsquo;t care what parser you use for your commands, as that is in isolation.&lt;/p&gt;

&lt;p&gt;Keep it simple.  A lot of parsers, including the one I like, have help and description baked in.  Pingo Console&amp;rsquo;s opinion is that help is separate, which reduces what a parser actually does down to its simplest parts.  I don&amp;rsquo;t use the help or description stuff from the parser I use, or any for that matter.&lt;/p&gt;

&lt;p&gt;My parser of choice:
&lt;a href=&#34;https://github.com/ghstahl/fluent-command-line-parser&#34;&gt;Pingo Variant: Fluent Command Line Parser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For most everything I do the below parsing example is about as complicated as I get.  The only thing my parser is missing is a mutual exclusion option, but I will add that when I need it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public class TestArgumentParser
{
    public string SourcePath { get; private set; }
    public string OutputPath { get; private set; }

    public void Parse(string[] args)
    {
        var parser = new Fclp.FluentCommandLineParser();

        parser.Setup&amp;lt;string&amp;gt;(CaseType.CaseInsensitive, Resources.Common.OptionLongName_Source,
            Resources.Common.OptionShortName_Source)
            .Required()
            .Callback(value =&amp;gt; SourcePath = value);

        parser.Setup&amp;lt;string&amp;gt;(CaseType.CaseInsensitive, Resources.Common.OptionLongName_Output,
            Resources.Common.OptionShortName_Output)
            .Required()
            .Callback(value =&amp;gt; OutputPath = value);

        var result = parser.Parse(args);
        if (result.HasErrors)
        {
            throw new Exception(result.ErrorText);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Pingo Console Documentation</title>
      <link>http://ghstahl.github.io/LearnPingoConsole/en/docs/docs/</link>
      <pubDate>Wed, 06 May 2015 11:09:35 +0000</pubDate>
      
      <guid>http://ghstahl.github.io/LearnPingoConsole/en/docs/docs/</guid>
      <description>&lt;p&gt;Pingo Console is a MEF based plugin architecture that has a built-in help engine.  It is designed for minimal contribution by developers to add a custom command to a console app.  The best place to start is with the jump start tutorial, as this will give you a sense of how the architecture is layed out.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>